/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseEvent;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Kimlong
 */
public class Modify extends javax.swing.JFrame {

    /**
     * Creates new form Modify
     */
    private static final String dataConn="jdbc:mysql://localhost:3306/jdbcdemo";
    private static final String username="root";
    private static final String password="";

    Connection sqlConn = null;
    PreparedStatement pst= null;
    ResultSet rs=null;
    ResultSet rs1=null;
    ResultSet rs2=null;

    int q;
    int i;
    int tableNum=0;


    //    =======================Update database======================================
    public void updateItem(){
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            sqlConn = DriverManager.getConnection(dataConn,username,password);
            pst = sqlConn.prepareStatement("select * from coursetb order by course");
            rs = pst.executeQuery();
            pst = sqlConn.prepareStatement("select * from roomtb order by room");
            rs1 = pst.executeQuery();
            pst = sqlConn.prepareStatement("select * from timetb order by time");
            rs2 = pst.executeQuery();

            ResultSetMetaData stData = rs.getMetaData();
            q = stData.getColumnCount();
            DefaultTableModel RecordTable1 = (DefaultTableModel) itemTable1.getModel();
            DefaultTableModel RecordTable2 = (DefaultTableModel) itemTable2.getModel();
            DefaultTableModel RecordTable3 = (DefaultTableModel) itemTable3.getModel();
            RecordTable1.setRowCount(0);
            RecordTable2.setRowCount(0);
            RecordTable3.setRowCount(0);

            String course="";
            String time="";
            String room="";

            while(rs.next()){
                course+=rs.getString("course")+";";
            }
            String[] courses =  course.split(";");

            while(rs1.next()){
                room +=rs1.getString("room")+";";
            }
            String[] rooms =  room.split(";");

            while(rs2.next()){
                time+=rs2.getString("time")+";";
            }
            String[] times =  time.split(";");


         for (int i=0;i<courses.length;i++){
             if (i==0) continue;
             Vector columnData = new Vector();
             columnData.add(courses[i]);
             RecordTable1.addRow(columnData);
         }

        for (int i=0;i<rooms.length;i++){
            if (i==0) continue;
            Vector columnData = new Vector();
            columnData.add(rooms[i]);
            RecordTable2.addRow(columnData);
        }

        for (int i=0;i<times.length;i++){
            if (i==0) continue;
            Vector columnData = new Vector();
            columnData.add(times[i]);
            RecordTable3.addRow(columnData);
        }


        }catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }
    public Modify() {
        initComponents();
        updateItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        oldItem = new javax.swing.JTextField();
        updateItem = new javax.swing.JButton();
        addItem = new javax.swing.JButton();
        deleteItem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable1 = new javax.swing.JTable();
        editMessage = new javax.swing.JLabel();
        insertInto = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        itemTable3 = new javax.swing.JTable();
        btnReset = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EDIT");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        oldItem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        updateItem.setBackground(new java.awt.Color(255, 204, 0));
        updateItem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateItem.setForeground(new java.awt.Color(255, 255, 255));
        updateItem.setText("Update");
        updateItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemActionPerformed(evt);
            }
        });

        addItem.setBackground(new java.awt.Color(0, 255, 153));
        addItem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addItem.setForeground(new java.awt.Color(255, 255, 255));
        addItem.setText("Add");
        addItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });

        deleteItem.setBackground(new java.awt.Color(255, 0, 51));
        deleteItem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteItem.setForeground(new java.awt.Color(255, 255, 255));
        deleteItem.setText("Delete");
        deleteItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });

        itemTable1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        itemTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable1.setCellSelectionEnabled(true);
        itemTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itemTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable1);

        editMessage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        editMessage.setForeground(new java.awt.Color(255, 0, 51));
        editMessage.setText(" ");

        insertInto.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        insertInto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course", "Room", "Time" }));
        insertInto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        itemTable2.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        itemTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itemTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(itemTable2);

        itemTable3.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        itemTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itemTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(itemTable3);

        btnReset.setBackground(new java.awt.Color(0, 153, 255));
        btnReset.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 0, 0));
        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Add to:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(oldItem, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertInto, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(addItem, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateItem, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(editMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(80, 80, 80))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oldItem, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addItem, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateItem, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertInto, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(38, 38, 38)
                .addComponent(editMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(MouseEvent evt) {
    }

    private void itemTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel RecordTable = (DefaultTableModel) itemTable1.getModel();

        int selectedRows = itemTable1.getSelectedRow();
        int selectedColumn = itemTable1.getSelectedColumn();
        oldItem.setText(RecordTable.getValueAt(selectedRows,selectedColumn).toString());
        tableNum=1;

        itemTable2.clearSelection();
        itemTable3.clearSelection();
    }//GEN-LAST:event_itemTable1MouseClicked

    private void itemTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTable2MouseClicked
        // TODO add your handling code here:
        DefaultTableModel RecordTable = (DefaultTableModel) itemTable2.getModel();

        int selectedRows = itemTable2.getSelectedRow();
        int selectedColumn = itemTable2.getSelectedColumn();
        oldItem.setText(RecordTable.getValueAt(selectedRows,selectedColumn).toString());
        tableNum=2;

        itemTable1.clearSelection();
        itemTable3.clearSelection();
    }//GEN-LAST:event_itemTable2MouseClicked

    private void itemTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTable3MouseClicked
        // TODO add your handling code here:
        DefaultTableModel RecordTable = (DefaultTableModel) itemTable3.getModel();

        int selectedRows = itemTable3.getSelectedRow();
        int selectedColumn = itemTable3.getSelectedColumn();
        oldItem.setText(RecordTable.getValueAt(selectedRows,selectedColumn).toString());
        tableNum=3;

        itemTable2.clearSelection();
        itemTable1.clearSelection();
    }//GEN-LAST:event_itemTable3MouseClicked

    private void updateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemActionPerformed
        // TODO add your handling code here:
        DefaultTableModel RecordTable1 = (DefaultTableModel) itemTable1.getModel();
        DefaultTableModel RecordTable2 = (DefaultTableModel) itemTable2.getModel();
        DefaultTableModel RecordTable3 = (DefaultTableModel) itemTable3.getModel();
        int selectedRows1 = itemTable1.getSelectedRow();
        int selectedRows2 = itemTable2.getSelectedRow();
        int selectedRows3 = itemTable3.getSelectedRow();
        /**
         * to check : the row is selected or not
         */
        if(selectedRows1 != -1 || selectedRows2 != -1 || selectedRows3 != -1){
            /**
             * to check : the required information is filled or not
             */
            if(!(oldItem.getText().isEmpty())) {

                    boolean courseExist=false;
                    boolean roomExist=false;
                    boolean timeExist=false;

                    try {
                        /**
                         * to check : database is connected successfully or not
                         */
                        try{

                            /**
                             * to check : the id is already used or not.
                             */

                            Class.forName("com.mysql.cj.jdbc.Driver");
                            sqlConn = DriverManager.getConnection(dataConn,username,password);

                            pst = sqlConn.prepareStatement("select studentID from student");
                            rs = pst.executeQuery();

                            if(tableNum==1){
                                pst = sqlConn.prepareStatement("select * from coursetb");
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    if(oldItem.getText().compareTo(rs.getString("course"))==0) {
                                        courseExist=true;
                                        break;
                                    }
                                }
                            }else if(tableNum==2) {
                                pst = sqlConn.prepareStatement("select * from roomtb");
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    if(oldItem.getText().compareTo(rs.getString("room"))==0) {
                                        courseExist=true;
                                        break;
                                    }
                                }
                            }else if(tableNum==3){
                                pst = sqlConn.prepareStatement("select * from timetb");
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    if(oldItem.getText().compareTo(rs.getString("time"))==0) {
                                        courseExist=true;
                                        break;
                                    }

                                }
                            }

                        }catch(Exception ex){
                            JOptionPane.showMessageDialog(null,ex);
                        }
                        /**
                         * if the id is not used yet.... process updating
                         */
                        if(!courseExist && !timeExist && !roomExist) {
                            /**
                             * to check : information of student is changed or not
                             */
                            if(true){
                                /**
                                 * to confirm the updating.
                                 */
                                int updateItem = JOptionPane.showConfirmDialog(null, "Are you sure to update?", "Confirm", JOptionPane.YES_NO_OPTION);

                                if (updateItem == JOptionPane.YES_OPTION) {

                                    Class.forName("com.mysql.cj.jdbc.Driver");
                                    sqlConn = DriverManager.getConnection(dataConn, username, password);
                                    String c;
                                    if(tableNum==1) {
                                         c = RecordTable1.getValueAt(selectedRows1, 0).toString();
                                        pst = sqlConn.prepareStatement("update coursetb set course=? where course=?");

                                    }else if(tableNum==2){
                                         c = RecordTable2.getValueAt(selectedRows2, 0).toString();
                                        pst = sqlConn.prepareStatement("update roomtb set room=? where room=?");
                                    }else {
                                         c = RecordTable3.getValueAt(selectedRows3, 0).toString();
                                        pst = sqlConn.prepareStatement("update timetb set time=? where time=?");
                                    }
                                    pst.setString(1, oldItem.getText());
                                    pst.setString(2, c);
                                    pst.executeUpdate();

                                    updateItem();
                                    editMessage.setForeground(new java.awt.Color(55, 204, 140));
                                    editMessage.setText("Record Updated");
                                }
                            }else {
                                JOptionPane.showMessageDialog(this, "You haven't changed anything!!!");
                            }
                        }else{
                            JOptionPane.showMessageDialog(this, "This item already existed!!!");
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }

            }else {
                editMessage.setForeground(new java.awt.Color(255, 0, 51));
                editMessage.setText("Please input all the information to update!!!");
            }
        }else {
            editMessage.setForeground(new java.awt.Color(255, 0, 51));
            editMessage.setText("Please select a row to update!!!");
            updateItem();
        }
    }//GEN-LAST:event_updateItemActionPerformed

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemActionPerformed
        // TODO add your handling code here:

        DefaultTableModel RecordTable1 = (DefaultTableModel) itemTable1.getModel();
        DefaultTableModel RecordTable2 = (DefaultTableModel) itemTable2.getModel();
        DefaultTableModel RecordTable3 = (DefaultTableModel) itemTable3.getModel();
        int selectedRows1 = itemTable1.getSelectedRow();
        int selectedRows2 = itemTable2.getSelectedRow();
        int selectedRows3 = itemTable3.getSelectedRow();
        /**
         * to check : the row is selected or not
         */
        if(selectedRows1 != -1 || selectedRows2 != -1 || selectedRows3 != -1){
            /**
             * to check : the required information is filled or not
             */
            if(!(oldItem.getText().isEmpty())) {

                try {

                    /**
                     * to confirm the deleting.
                     */
                    int isDeleted = JOptionPane.showConfirmDialog(null, "Are you sure to delete?", "Confirm", JOptionPane.YES_NO_OPTION);

                    if (isDeleted == JOptionPane.YES_OPTION) {

                        Class.forName("com.mysql.cj.jdbc.Driver");
                        sqlConn = DriverManager.getConnection(dataConn, username, password);
                        String c;
                        if(tableNum==1) {
                            c = RecordTable1.getValueAt(selectedRows1, 0).toString();
                            pst = sqlConn.prepareStatement("delete from coursetb where course=?");
                        }else if(tableNum==2){
                            c = RecordTable2.getValueAt(selectedRows2, 0).toString();
                            pst = sqlConn.prepareStatement("delete from roomtb where room=?");
                        }else {
                            c = RecordTable3.getValueAt(selectedRows3, 0).toString();
                            pst = sqlConn.prepareStatement("delete from timetb where time=?");
                        }
                        pst.setString(1, c);
                        pst.executeUpdate();

                        updateItem();
                        editMessage.setForeground(new java.awt.Color(55, 204, 140));
                        editMessage.setText("Record deleted");
                    }

                } catch (Exception ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }


            }else {
                editMessage.setForeground(new java.awt.Color(255, 0, 51));
                editMessage.setText("Please input all the information to delete!!!");
            }
        }else {
            editMessage.setForeground(new java.awt.Color(255, 0, 51));
            editMessage.setText("Please select a row to delete!!!");
            updateItem();
        }

    }//GEN-LAST:event_deleteItemActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        oldItem.setText("");
        editMessage.setText(" ");
        updateItem();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new Setting().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed


    private void addItemActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        if(!(oldItem.getText().isBlank())){

                boolean courseExist=false;
                boolean roomExist=false;
                boolean timeExist=false;

                try {
                    /**
                     * to check : database is connected successfully or not
                     */
                    try{
                        /**
                         * to check : the id is already used or not
                         */
                        Class.forName("com.mysql.cj.jdbc.Driver");
                        sqlConn = DriverManager.getConnection(dataConn,username,password);
                        if(tableNum==1){
                            pst = sqlConn.prepareStatement("select * from coursetb");
                            rs = pst.executeQuery();
                            while(rs.next()){
                                if(oldItem.getText().compareTo(rs.getString("course"))==0) {
                                    courseExist=true;
                                    break;
                                }
                            }
                        }else if(tableNum==2) {
                            pst = sqlConn.prepareStatement("select * from roomtb");
                            rs = pst.executeQuery();
                            while(rs.next()){
                                if(oldItem.getText().compareTo(rs.getString("room"))==0) {
                                    courseExist=true;
                                    break;
                                }
                            }
                        }else if(tableNum==3){
                            pst = sqlConn.prepareStatement("select * from timetb");
                            rs = pst.executeQuery();
                            while(rs.next()){
                                if(oldItem.getText().compareTo(rs.getString("time"))==0) {
                                    courseExist=true;
                                    break;
                                }
                            }
                        }

                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(null,ex);
                    }
                    /**
                     * if the id is not used yet... process the inserting
                     */
                    if(!courseExist && !timeExist && !roomExist) {
                        /**
                         * to confirm the inserting
                         */
                        editMessage.setForeground(new java.awt.Color(55, 204, 140));

                        int AddItem = JOptionPane.showConfirmDialog(null, "Are you sure to add?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (AddItem == JOptionPane.YES_OPTION) {
                            Class.forName("com.mysql.cj.jdbc.Driver");
                            sqlConn = DriverManager.getConnection(dataConn, username, password);

                            if(insertInto.getSelectedIndex()==0){
                                pst = sqlConn.prepareStatement("insert into coursetb(course) value(?)");
                                pst.setString(1, oldItem.getText() );
                                editMessage.setText("Record added to Course table");
                            }else if(insertInto.getSelectedIndex()==1) {
                                pst = sqlConn.prepareStatement("insert into roomtb(room) value(?)");
                                pst.setString(1, oldItem.getText() );
                                editMessage.setText("Record added to Room table");
                            }else if(insertInto.getSelectedIndex()==2){
                                pst = sqlConn.prepareStatement("insert into timetb(time) value(?)");
                                pst.setString(1, oldItem.getText() );
                                editMessage.setText("Record added to Time table");
                            }

                            pst.executeUpdate();
                            updateItem();
//                            editMessage.setForeground(new java.awt.Color(55, 204, 140));
//                            editMessage.setText("Record added");

                        }
                    }else {
                        JOptionPane.showMessageDialog(this, "This item already existed!!!");
                        editMessage.setText(" ");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }


        }else {
            editMessage.setForeground(new java.awt.Color(255, 0, 51));
            editMessage.setText("Please Input all the information to insert!!!");
            updateItem();
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItem;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton deleteItem;
    private javax.swing.JLabel editMessage;
    private javax.swing.JComboBox<String> insertInto;
    private javax.swing.JTable itemTable1;
    private javax.swing.JTable itemTable2;
    private javax.swing.JTable itemTable3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField oldItem;
    private javax.swing.JButton updateItem;
    // End of variables declaration//GEN-END:variables
}
